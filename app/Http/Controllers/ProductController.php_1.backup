<?php

namespace App\Http\Controllers;

use App\Models\Country;
use App\Models\Currency;
use App\Models\Models\Category;
use App\Models\Product;
use App\Models\ProductImage;
use App\Models\ProductStock;
use App\Models\Seller;
use App\Models\ShippingLocation;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Yajra\DataTables\DataTables;

class ProductController extends Controller
{
    public function addNewProduct(Request $reqeust)
    {
        //VENDOR DETAILS
        $vendorDetails = Seller::find(Auth::id());

        //PREPARE COUNTRY LIST
        $countryList = Country::select('id', 'country_name AS text')->latest()->get();

        //CATEGORY LIST
        $categoryList = $vendorDetails->categories;

        //CURRENCY LIST
        //$currencyList = Currency::select('id', 'title AS text')->latest()->get();
        //dd($currencyList);

        //COMPACT
        $data = compact('countryList', 'categoryList','vendorDetails');

        //VIEW WITH COMPACT DATA
        return view('product.add_new_product', $data);
    }


    public function saveNewProduct(Request $request)
    {
        //dd($request->input());

        //MAIN VALIDATION ARRAY
        $mainValidationArray = [
            'product_type' => 'required',
            'product_name' => 'required',
            'declaration' => 'required',
            'product_cat' => 'required|exists:categories,id',
            'product_subcat' => 'required|exists:categories,id',
            'warranty_type' => 'required',
            'warranty_period' => 'required_unless:warranty_type,No Warranty',
            'weight' => 'required',
            'length' => 'required',
            'width' => 'required',
            'height' => 'required',
            'brand_name' => 'required',
            'photo_brandLogo' => 'nullable|image',
            'wholesale_availability' => 'required',
            'wholesale_minimum_quantity' => 'required_if:wholesale_availability,Available',
            'wholesale_price_per_unit' => 'required_if:wholesale_availability,Available',
            'shipping_method' => 'required',
            'shipping_currency' => 'required|exists:currencies,id',
            'minimum_shipping_time' => 'required',
            'maximum_shipping_time' => 'required',
            'shipping_count' => 'required|numeric',
            'shipping_country_0' => 'required',
            'tax_option' => 'required',
            'tax_title' => 'required_unless:tax_option,Not Applicable',
            'tax_pct' => 'required_unless:tax_option,Not Applicable',
            'retail_price' => 'required',
            'discount_pct' => 'required',
            'selling_price' => 'required',
            'photo_stockImage_0' => 'image',
            'qty_0' => 'required',
            'alertQty_0' => 'required',
            'size_details' => 'required',
            'product_description' => 'required',
            'buy_and_return_policy' => 'required',
        ];

        //IF SHIPPING COUNTRY IS NOT SET TO WORLWIDE => 99999
        if ($request->shipping_country_0 != 99999) {
            $mainValidationArray['shipping_cities_0'] = 'required';
        }

        //SHIPPING LOCATION VALIDATION EXTENSION
        $shippingValidationExtension = array();
        if ($request->shipping_count > 1) {
            for ($i = 1; $i < $request->stock_count; $i++) {
                $shippingValidationExtension["shipping_cities_$i"] = "required_unless:shipping_countgry_$i,null";
            }
        }

        //FINAL VALIDATION ARRAY
        $finalValidatioinArray = array_merge($mainValidationArray, $shippingValidationExtension);
        //dd($finalValidatioinArray);

        //FOR VALIDATION RULES
        $validated = $request->validate($finalValidatioinArray);

        try {
            DB::beginTransaction();

            /** SAVE  GENERAL INFORMATION **/
                $product = new Product();
                $product->product_code = $this->generateProductCode();
                $product->seller_id = Auth::id();
                $product->name = $request->product_name;
                $product->product_type = $request->product_type;
                $product->product_declaration = $request->declaration;
                $product->category_id = $request->product_cat;
                $product->sub_category_id = $request->product_subcat;
                $product->warranty_type = $request->warranty_type;
                $product->weight = $request->weight;
                $product->length = $request->length;
                $product->width = $request->width;
                $product->height = $request->height;
                $product->brand_name = $request->brand_name;
                $product->wholesale_availability = $request->wholesale_availability;
                $product->shipping_method = $request->shipping_method;
                $product->shipping_currency = $request->shipping_currency;
                $product->minimum_shipping_time = $request->minimum_shipping_time;
                $product->maximum_shipping_time = $request->maximum_shipping_time;
                $product->tax_option = $request->tax_option;
                $product->size_details = $request->size_details;
                $product->product_description = $request->product_description;
                $product->buy_and_return_policy = $request->buy_and_return_policy;  
                // $product->shipping_fee_0_to_1000 =  $request->shipping_fee_0_to_1000 ?? 0.00;
                // $product->shipping_fee_1001_to_3000 =  $request->shipping_fee_1001_to_3000 ?? 0.00;
                // $product->shipping_fee_3001_to_5000 =  $request->shipping_fee_3001_to_5000 ?? 0.00;
                // $product->shipping_fee_5001_to_10000 =  $request->shipping_fee_5001_to_10000 ?? 0.00;
                // $product->shipping_fee_10001_to_15000 =  $request->shipping_fee_10001_to_15000 ?? 0.00;
                // $product->shipping_fee_above_15000 =  $request->shipping_fee_above_15000 ?? 0.00;
                $product->retail_price = $request->retail_price;
                $product->discount_pct = $request->discount_pct;
                $product->selling_price = $request->selling_price;
    
                if ($request->warranty_type != "No Warranty") { 
                    $product->warranty_period = $request->warranty_period; 
                }

                if ($product->wholesale_availability == "Available") {
                    $product->wholesale_minimum_quantity = $request->wholesale_minimum_quantity;
                    $product->wholesale_price_per_unit = $request->wholesale_price_per_unit;
                }

                if ($product->tax_option != "Not Applicable") {
                    $product->tax_title = $request->tax_title;
                    $product->tax_pct = $request->tax_pct;
                }
                
                // SAVE BRAND IMAGE, IF IS UPLOADED
                if ($request->hasFile('photo_brandLogo')) {
                    if ($request->file('photo_brandLogo')->isValid()) {
                        $request->photo_brandLogo->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'brand', 'akp_storage');
                        $product->brand_image = $request->photo_brandLogo->hashName();
                    } else {
                        return redirect()->back()->withErrors('Invalid brand logo file');
                    }
                }

                // SAVE VIDEO FILE IF UPLOADED
                if ($request->hasFile('video_file')) {
                    if ($request->file('video_file')->isValid()) {
                        $request->video_file->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'video', 'akp_storage');
                        $product->video_url = $request->video_file->hashName();
                        $product->video_mode = 'upload';
                    } else {
                        return back()->withInput()->withErrors(['errors' => 'Invalid product video file']);
                    }
                }
                // ELSE SAVE VIDEO URL
                elseif ($request->video_url) {
                    $product->video_url = $request->video_url;
                    $product->video_mode = 'url';
                }
                // ELSE SET DEFAULT VIDEO
                else {
                    $product->video_url = "default.mp4";
                }

                $product->save();
            /** GENERAL INFORMATION SAVED */

            /** SAVE SHIPPING-LOCATIONS */
                for ($i = 0; $i < $request->shipping_count; $i++) {
                    //SHIPPING TO LIMITED COUNTRIES
                    if ($request->{"shipping_country_$i"} != 99999) {
                        //SHIPPING TO LIMITED CITIES
                        if ($request->{"shipping_cities_$i"} != 99999) {
                            $shippingCities = explode(",", $request->{"shipping_cities_$i"});
                            foreach ($shippingCities as $shippingCity) {
                                $shippingLocation = new ShippingLocation();
                                $shippingLocation->country_id = $request->{"shipping_country_$i"};
                                $shippingLocation->city_id = $shippingCity;
                                $product->shippingLocations()->save($shippingLocation);
                            }
                        }
                        //SHIPPING TO ALL COUNTRY
                        else {
                            $shippingLocation = new ShippingLocation();
                            $shippingLocation->country_id = $request->{"shipping_country_$i"};
                            $product->shippingLocations()->save($shippingLocation);
                        }
                    } else {
                        $product->world_wide_shipping = "yes";
                        $product->save();
                    }
                }
            /**SHIPPING-LOCATIONS SAVED */

            /** SAVE PRODUCT-IMAGES */
                $productImage = new ProductImage();

                $imageFound = false;
                for ($i = 1; $i <= 10; $i++) {
                    if ($request->hasFile("photo_image_$i")) {
                        if ($request->file("photo_image_$i")->isValid()) {
                            $imageFound = true;
                            $request->{"photo_image_$i"}->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'images', 'akp_storage');
                            $productImage->{"image_$i"} = $request->{"photo_image_$i"}->hashName();
                        }
                    }
                }

                if (!$imageFound) {
                    return back()->withInput()->withErrors(['errors' => 'Upload at least 1 product image']);
                } else {
                    $product->images()->save($productImage);
                }
            /** PRODUCT-IMAGES SAVED */

            /** SAVE PRODUCT-STOCKS */
                for ($i = 0; $i <= $request->stock_count; $i++) {
                    if($request->{"qty_$i"} != null)
                    {
                        $productStock = new ProductStock();
                        $productStock->color = $request->{"color_$i"};
                        $productStock->size = $request->{"size_$i"};
                        $productStock->quantity = $request->{"qty_$i"};
                        $productStock->alert_quantity = $request->{"alertQty_$i"};

                        if ($request->hasFile("photo_stockImage_$i")) {
                            if ($request->file("photo_stockImage_$i")->isValid()) {
                                $request->{"photo_stockImage_$i"}->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'stocks', 'akp_storage');
                                $productStock->image_url = $request->{"photo_stockImage_$i"}->hashName();
                            } else {
                                return redirect()->back()->withErrors('Invalid stock image file');
                            }
                        }

                        $product->stocks()->save($productStock);
                    }
                }
            /** STOCKS SAVED */

            DB::commit();

            return back()->with('message', 'Product added successfully');
        } catch (\Exception $e) {
            DB::rollBack();

            return back()->withInput()->with('error', $e->getMessage());
        }
    }


    private function generateProductCode()
    {
        $sellerCode = Auth::user()->seller_code;


        //FETCH LAST PRODUCT'S CODE
        $lastProduct = Product::where('seller_id', Auth::id())->latest()->first();
        //dd($lastProduct);

        if (!$lastProduct) {
            $newProductCode = $sellerCode . '0001';
        } else {
            //LATEST PRODUCT CODE
            $lastProductCode = $lastProduct->product_code;
            $productNumber = str_replace($sellerCode, "", $lastProductCode);
            $productNumber = filter_var($productNumber, FILTER_SANITIZE_NUMBER_INT);

            $newProductCode = $sellerCode . str_pad($productNumber + 1, 4, 0, STR_PAD_LEFT); //LATEST SELLER CODE
        }

        return $newProductCode;
    }


    //SHOWS APPROVED PRODUCT LIST PAGE
    public function productList(Request $request)
    {
        //PREPARE DATA FOR DATA-TABLE
        if ($request->ajax()) {
            //PREPARE DATA FOR DATATABLE
            $data = Product::with(['category', 'seller', 'subCategory'])->where('seller_id', Auth::id())->get();

            return DataTables::of($data)
                ->addColumn('formatted_date', function ($row) {
                    return date('Y-m-d', strtotime($row->created_at));
                })
                ->addColumn('category_name', function ($row) {
                    return $row->category->title . ' / ' . $row->subCategory->title;
                })
                ->addColumn('action', function ($row) {
                    //ADD ACTION BUTTONS ALONG WITH 'PUBLISH' BUTTON
                    $detailsUrl = route('product-details', ['productId' => $row->id]);

                    if($row->status == 'active')
                    {
                        $btn = '   
                            <a class="btn btn-success btn-stroke btn-circle" title="Details" href="' . $detailsUrl . '"><i class="fa fa-list"></i></a>    
                            <button class="btn btn-danger btn-stroke btn-circle" title="Delete" onclick="deleteIt(' . $row->id . ',' . $row->name . ')"><i class="fa fa-trash"></i></button>
                            <button class="btn btn-danger btn-stroke btn-circle" title="Deactivate" onclick="changeStatus(' . $row->id . ', 0)"><i class="fa fa-close"></i></button>
                        ';
                    }
                    else if($row->status == 'inactive')
                    {
                        $btn = ' 
                                <a class="btn btn-success btn-stroke btn-circle" title="Details" href="' . $detailsUrl . '"><i class="fa fa-list"></i></a>   
                                <button class="btn btn-danger btn-stroke btn-circle" title="Delete" onclick="deleteIt(' . $row->id . ',' . $row->name . ')"><i class="fa fa-trash"></i></button>
                                <button class="btn btn-success btn-stroke btn-circle" title="Activate" onclick="changeStatus(' . $row->id . ', 1)"><i class="fa fa-check"></i></button>  
                            ';
                    }
                    else if($row->status == 'pending')
                    {
                        $btn = ' 
                                <a class="btn btn-success btn-stroke btn-circle" title="Details" href="' . $detailsUrl . '"><i class="fa fa-list"></i></a>   
                                <button class="btn btn-danger btn-stroke btn-circle" title="Delete" onclick="deleteIt(' . $row->id . ',' . $row->name . ')"><i class="fa fa-trash"></i></button>
                            ';
                    }

                    return $btn;
                })
                ->rawColumns(['action'])
                ->make(true);
        }
        //RENDER VIEW
        else {
            return view('product.product_list');
        }
    }


    //PRODUCT DETAILS
    public function productDetails(Request $request, $productId)
    {
        //FETCH PRODUCT DETAILS
        $product = Product::findOrFail($productId);
        //dd($product);

        //-- IF VIDEO FOR THE PRODUCT WAS UPLOADED, ADJUST << VIDEO_URL >> SO THAT IN CONTAINS AN ABSOLUTE URL
        if ($product->video_mode == "upload") {
            $product->video_url = env('AKP_STORAGE') . 'products/' . $product->seller->seller_code . '/' . $product->product_code . '/video/' . $product->video_url;
        }

        //PREPARE COUNTRY LIST
        $countryList = Country::select('id', 'country_name AS text')->latest()->get();

        //SUB CATEGORY LIST
        $subcategoryList = Category::select('id', 'title AS text')->where('parent_id', $product->category_id)->latest()->get();
        //dd($subcategoryList);

        //CURRENCY LIST
        //$currencyList = Currency::select('id', 'title AS text')->latest()->get();
        //dd($currencyList);

        //VENDOR DETAILS
        $vendorDetails = Seller::find(Auth::id());

        //CATEGORY LIST
        $categoryList = $vendorDetails->categories;
        // foreach($categoryList as $key => $data){
        //     dd($data->category);
        //}

        //COMPACT
        $data = compact('countryList', 'categoryList', 'product', 'subcategoryList', 'vendorDetails');

        return view('product.product_details', $data);
    }


    //EDIT PRODUCT
    public function updateProduct(Request $request)
    {
        //-- DEBUG: CHECK INFPUT
        //dd($request->input());


        /** VALIDATION START */
            /** VALIDATION: GENERAL-INFORMATION VALIDATION */
                $mainValidationArray = [
                    'product_id' => 'required|exists:products,id',
                    'product_type' => 'required',
                    'product_name' => 'required',
                    'declaration' => 'required',
                    'product_cat' => 'required|exists:categories,id',
                    'product_subcat' => 'required|exists:categories,id',
                    'warranty_type' => 'required',
                    'warranty_period' => 'required_unless:warranty_type,No Warranty',
                    'weight' => 'required',
                    'length' => 'required',
                    'width' => 'required',
                    'height' => 'required',
                    'brand_name' => 'required',
                    'photo_brandLogo' => 'nullable|image',
                    'wholesale_availability' => 'required',
                    'wholesale_minimum_quantity' => 'required_if:wholesale_availability,Available',
                    'wholesale_price_per_unit' => 'required_if:wholesale_availability,Available',
                    'shipping_method' => 'required',
                    'shipping_currency' => 'required|exists:currencies,id',
                    'minimum_shipping_time' => 'required',
                    'maximum_shipping_time' => 'required',
                    'shipping_count' => 'required|numeric',
                    'shipping_country_0' => 'required',
                    'tax_option' => 'required',
                    'tax_title' => 'required_unless:tax_option,Not Applicable',
                    'tax_pct' => 'required_unless:tax_option,Not Applicable',
                    'retail_price' => 'required',
                    'discount_pct' => 'required',
                    'selling_price' => 'required',
                    'size_details' => 'required',
                    'product_description' => 'required',
                ];

                //IF SHIPPING COUNTRY IS NOT SET TO WORLWIDE => 99999
                if ($request->shipping_country_0 != 99999) {
                    $mainValidationArray['shipping_cities_0'] = 'required';
                }
            /** GENERAL-INFORMATION VALIDATION COMPLETE */


            /** VALIDATION: SHIPPING-LOCATION VALIDATION */
                $shippingValidationExtension = array();
                if($request->shipping_count > 1)
                {
                    for($i=1;$i<$request->stock_count;$i++)
                    {
                        $shippingValidationExtension["shipping_cities_$i"] = "required_unless:shipping_countgry_$i,null";
                    }
                }
            /** SHIPPING-LOCATION VALIDATION COMPLETE */

            //FINAL VALIDATION ARRAY
            $finalValidatioinArray = array_merge($mainValidationArray, $shippingValidationExtension);
            //dd($finalValidatioinArray);

            //FOR VALIDATION RULES
            $validated = $request->validate($finalValidatioinArray);
        /** VALIDATION COMPLETE */


        //GRAB INTENDED PRODUCT MODEL
        $product = Product::findOrFail($request->product_id);
        //dd($product);


        /** UPDATE GENERAL-INFORMATION */
            $product->status = "pending";
            if($product->name != $request->product_name) $product->name = $request->product_name;
            if($product->product_type != $request->product_type) $product->product_type = $request->product_type;
            if($product->product_declaration != $request->declaration) $product->product_declaration = $request->declaration;
            if($product->category_id != $request->product_cat) $product->category_id = $request->product_cat;
            if($product->sub_category_id != $request->product_subcat) $product->sub_category_id = $request->product_subcat;
            if($product->warranty_type != $request->warranty_type) $product->warranty_type = $request->warranty_type;
            if($product->warranty_period != $request->warranty_period) $product->warranty_period = $request->warranty_period;
            if($product->weight != $request->weight) $product->weight = $request->weight;
            if($product->length != $request->length) $product->length = $request->length;
            if($product->width != $request->width) $product->width = $request->width;
            if($product->height != $request->height) $product->height = $request->height;
            if($product->brand_name != $request->brand_name) $product->brand_name = $request->brand_name;
            if($product->wholesale_availability != $request->wholesale_availability) $product->wholesale_availability = $request->wholesale_availability;
            if($product->wholesale_minimum_quantity != $request->wholesale_minimum_quantity) $product->wholesale_minimum_quantity = $request->wholesale_minimum_quantity;
            if($product->wholesale_price_per_unit != $request->wholesale_price_per_unit) $product->wholesale_price_per_unit = $request->wholesale_price_per_unit;
            if($product->shipping_method != $request->shipping_method) $product->shipping_method = $request->shipping_method;
            if($product->shipping_fee != $request->shipping_fee) $product->shipping_fee = $request->shipping_fee;
            if($product->shipping_currency != $request->shipping_currency) $product->shipping_currency = $request->shipping_currency;
            if($product->minimum_shipping_time != $request->minimum_shipping_time) $product->minimum_shipping_time = $request->minimum_shipping_time;
            if($product->maximum_shipping_time != $request->maximum_shipping_time) $product->maximum_shipping_time = $request->maximum_shipping_time;
            // if($product->shipping_fee_0_to_1000 != $request->shipping_fee_0_to_1000) $product->shipping_fee_0_to_1000 = $request->shipping_fee_0_to_1000;
            // if($product->shipping_fee_0_to_1000 != $request->shipping_fee_0_to_1000) $product->shipping_fee_0_to_1000 = $request->shipping_fee_0_to_1000 ?? 0.00;
            // if($product->shipping_fee_1001_to_3000 != $request->shipping_fee_1001_to_3000) $product->shipping_fee_1001_to_3000 =  $request->shipping_fee_1001_to_3000 ?? 0.00;
            // if($product->shipping_fee_3001_to_5000 != $request->shipping_fee_3001_to_5000) $product->shipping_fee_3001_to_5000 =  $request->shipping_fee_3001_to_5000 ?? 0.00;
            // if($product->shipping_fee_5001_to_10000 != $request->shipping_fee_5001_to_10000) $product->shipping_fee_5001_to_10000 =  $request->shipping_fee_5001_to_10000 ?? 0.00;
            // if($product->shipping_fee_10001_to_15000 != $request->shipping_fee_10001_to_15000) $product->shipping_fee_10001_to_15000 =  $request->shipping_fee_10001_to_15000 ?? 0.00;
            // if($product->shipping_fee_above_15000 != $request->shipping_fee_above_15000) $product->shipping_fee_above_15000 =  $request->shipping_fee_above_15000 ?? 0.00;
            if($product->retail_price != $request->retail_price) $product->retail_price = $request->retail_price;
            if($product->discount_pct != $request->discount_pct) $product->discount_pct = $request->discount_pct;
            if($product->selling_price != $request->selling_price) $product->selling_price = $request->selling_price;

            if($product->tax_option != $request->tax_option) $product->tax_option = $request->tax_option;
            if($product->tax_option != "Not Applicable") //-- TAX IS NOT INCLUDED WITH THE PRODUCT-PRICE
            {
                if($product->tax_title != $request->tax_title) $product->tax_title = $request->tax_title;
                if($product->tax_pct != $request->tax_pct) $product->tax_pct = $request->tax_pct;    
            }
            else
            {
                $product->tax_title = NULL;
                $product->tax_pct = NULL;
            }


            /** UPDATE GENERAL-INFORMATION: UPDATE BRAND IMAGE */
                //-- BRAND-IMAGE IS DELETED
                if($request->existing_image_deleted_brandLogo == 'yes')
                {
                    $product->brand_image = NULL;
                }

                //-- NEW BRAND-IMAGE IS UPLOADED
                if ($request->hasFile('photo_brandLogo')) 
                {
                    if ($request->file('photo_brandLogo')->isValid()) 
                    {
                        //-- DELETE OLD BRAND LOGO
                        Storage::disk('akp_storage')->delete('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/brand/' . $product->brand_image);

                        //-- SAVE NEW BRAND LOGO
                        $request->photo_brandLogo->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/brand', 'akp_storage');

                        //-- SET NEW BRAND LOGO NAME IN DATABASE
                        $product->brand_image = $request->photo_brandLogo->hashName();

                    } 
                    else 
                    {
                        return redirect()->back()->withErrors('Invalid brand logo file');
                    }
                }
            /** BRAND IMAGE UPDATED */


            /** UPDATE GENERAL-INFORMATION: UPDATE PRODUCT VIDEO */
                //-- IF NEW VIDEO URL IS PROVIDED
                if($request->video_url && $product->video_url != $request->video_url)
                {
                    $product->video_url = $request->video_url;
                    $product->video_mode = 'url';
                }

                //-- IF NEW VIDEO FILE IS UPLOADED
                if ($request->hasFile('video_file')) 
                {
                    if ($request->file('video_file')->isValid()) 
                    {
                        //-- DELETE OLD VIDEO FILE
                        Storage::disk('akp_storage')->delete('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/video/' . $product->brand_image);

                        //-- SAVE NEW VIDEO FILE
                        $request->video_file->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/video', 'akp_storage');

                        //-- SET NEW VIDEO FILE NAME TO DATABASE
                        $product->video_url = $request->video_file->hashName();
                        $product->video_mode = 'upload';
                    } 
                    else 
                    {
                        return back()->withInput()->withErrors(['errors' => 'Invalid product video file']);
                    }
                }
                
                if($product->size_details != $request->size_details) $product->size_details = $request->size_details;
                if($product->product_description != $request->product_description) $product->product_description = $request->product_description;
                if($product->buy_and_return_policy != $request->buy_and_return_policy) $product->buy_and_return_policy = $request->buy_and_return_policy;
            /** PRODUCT VIDEOS UPDATED */


            //-- SAVE GENERAL INFORMATION
            if(!$product->save())
            {
                return back()->withInput()->with('error', 'Something went wrong, please try again !!');
            }
        /** GENERAL-INFORMATION UPDATED */


        /** UPDATE SHIPPING-LOCATIONS (WORKS IN << DELETE & ADD >> CONCEPT) */
            //-- WRAPP IN A TRANSACTION
            DB::transaction(function () use ($request, $product) {
            
                //-- DROP EXISTING SHIPPING DETAILS OF CURRENT PRODUCT
                ShippingLocation::where('product_id', $product->id)->delete();

                //-- INSERT NEW ONES
                for ($i = 0; $i < $request->shipping_count; $i++) 
                {
                    //SHIPPING TO LIMITED COUNTRIES
                    if ($request->{"shipping_country_$i"} != 99999) 
                    {
                        $shippingCities = $request->{"shipping_cities_$i"};
                        if(is_array($shippingCities) != 1)
                        {
                            $shippingCities = explode("," , $shippingCities);
                        }

                        //SHIPPING TO LIMITED CITIES
                        if (!in_array(99999, $shippingCities)) 
                        {
                           
                            foreach ($shippingCities as $shippingCity) 
                            {
                                $shippingLocation = new ShippingLocation();
                                $shippingLocation->country_id = $request->{"shipping_country_$i"};
                                $shippingLocation->city_id = $shippingCity;
                                $product->shippingLocations()->save($shippingLocation);
                            }
                        }
                        //SHIPPING TO ALL COUNTRY
                        else 
                        {
                            $shippingLocation = new ShippingLocation();
                            $shippingLocation->country_id = $request->{"shipping_country_$i"};
                            $product->shippingLocations()->save($shippingLocation);
                        }
                    } 
                    else 
                    {
                        $product->world_wide_shipping = "yes";
                    }
                }
            }); 
        /**SHIPPING-LOCATIONS UPDATED */


        /** UPDATE PRODUCT-IMAGES */
            $productImage = $product->images;

            for ($i = 1; $i <= 10; $i++) {
                //-- USER DEELTED PREVIOUS PHOTO OF CURRENT INDEX
                if($request->{"existing_image_deleted_image_$i"} == "yes")
                {
                    $productImage->{"image_$i"} = NULL;
                }
                
                //-- USER ADDED NEW PHOTO IN CURRENT INDEX
                if ($request->hasFile("photo_image_$i")) {
                    if ($request->file("photo_image_$i")->isValid()) {
                        $request->{"photo_image_$i"}->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'images', 'akp_storage');
                        $productImage->{"image_$i"} = $request->{"photo_image_$i"}->hashName();
                    }
                }
            }

            //-- CHECK IF ATLEAST 1 IMAGE IS THERE FOR THE PRODUCT
            //- REDIRECT BACK WITH WARNING MESSAGE IF NOT
            $imageFound = false;
            for ($i = 1; $i <= 10; $i++) {
                if( $productImage->{"image_$i"} ) $imageFound = true;
            }
            if (!$imageFound) {
                return back()->withInput()->withErrors(['errors' => 'You can not delete all the images of a product !']);
            } 

            
            //-- SAVE UPDATE
            $product->images()->save($productImage);
        /** PRODUCT-IMAGES UPDATED */


        /** UPDATE PRODUCT-STOCK (WORKS IN << DELETE & ADD >> CONCEPT) */
            if($request->stock_count == 0)
            {
                return back()->withInput()->with('error', 'You cannot delete all the stocks of a product !');
            }

            //-- WRAPP IN A TRANSACTION
            DB::beginTransaction();

            //-- DELETE OLD STOCKS
            $product->stocks()->delete();

            //-- ADD PRODUCT STOCK
            $stockEntryOk = true;
            $stockEntryArray = [];
            for ($i = 0; $i <= $request->stock_count; $i++) {
                if($request->{"qty_$i"} != null)
                {
                    //-- DEBUG: IMPORTANT
                    //dd($i,$request->{"image_exists_stockImage_$i"} , $request->{"existing_image_deleted_stockImage_$i"} , $request->{"existing_image_name_stockImage_$i"});

                    //-- CREATE NEW PRODUCT STOCK
                    $productStock = new ProductStock();
                    $productStock->color = $request->{"color_$i"};
                    $productStock->size = $request->{"size_$i"};
                    $productStock->quantity = $request->{"qty_$i"};
                    $productStock->alert_quantity = $request->{"alertQty_$i"};
                    
                    //-- NEW STOCK-IMAGE IS UPLOADED
                    if($request->hasFile("photo_stockImage_$i"))
                    {
                        //-- USER IS REPLACING OLD STOCK-IMAGE WITH NEW ONE
                        if($request->{"existing_image_deleted_stockImage_$i"} == "yes")
                        {
                            //-- DELETE OLD STOCK-IMAGE
                            Storage::disk('akp_storage')->delete('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/stocks/' . $request->{"existing_image_name_stockImage_$i"});
                        }
                        
                        //-- UPLOAD NEW STOCK IMAGE
                        if ($request->file("photo_stockImage_$i")->isValid()) 
                        {
                            //-- SAVE NEW IMAGE
                            $request->{"photo_stockImage_$i"}->store('products/' . Auth::user()->seller_code . '/' . $product->product_code . '/' . 'stocks', 'akp_storage');
                            $productStock->image_url = $request->{"photo_stockImage_$i"}->hashName();
                        } 
                        else 
                        {
                            return redirect()->back()->withErrors('Invalid stock image file');
                        }
                    }
                    //-- STOCK IMAGE IS NOT UPLOADED
                    else
                    {
                        //-- OLD STOCK-IMAGE EXISTED
                        if($request->{"image_exists_stockImage_$i"} == "yes")
                        {
                            //-- DELETED OLD IMAGE
                            if($request->{"existing_image_deleted_stockImage_$i"} == "yes")
                            {
                                $productStock->image_url = NULL;
                            }
                            //-- KEEPING OLD IMAGE
                            elseif($request->{"existing_image_name_stockImage_$i"} != null)
                            {
                                $productStock->image_url = $request->{"existing_image_name_stockImage_$i"};
                            }
                        }
                        else
                        {
                            $productStock->image_url = NULL;
                        }
                    }

                    $stockEntryArray[] = $productStock;
                }
            }

            //-- SAVE STOCK
            $product->stocks()->saveMany($stockEntryArray);

            //COMMIT 
            DB::commit();
        /** STOCKS SAVED */

        /** PRODUCT-STOCK UPDATED */


        return back()->with('message', 'Product updated successfully');
    }


    //FUNCTION TO CHANGE PRODUCT STATUS
    //AVAILABLE OPTIONS: 'active', 'inactive'
    public function changeProductStatus(Request $request){
        //COLLECT USER INPUT
        $productId = $request->itemId;
        $statusText = $request->status;

        //FETCH PRODUCT DETAILS
        $product = Product::find($productId);

        //SET NEW STATUS
        $product->status = $statusText;

        //SAVE NEW STATUS
        $product->save();  
    }


    //METHOD TO DELETE A PRODUCT
    public function deleteProduct(Request $request)
    {
        //GET MENU INSTANCE
        $product = Product::find($request->input('itemId'));

        //RETURN 0 IF FAILED TO DELETE
        if (!$product->forceDelete()) {
            echo json_encode(array('status' => 0));
        }
        //RETURN 1 IF DELETED SUCCESSFULLY
        else {
            echo json_encode(array('status' => 1));
        }
    }
}
